CHECK FIXME AND TODO:



Jour 1 :

 Apprentissage de l'environnement ROS
  -> Création de package, construction, lancement
  -> Fonctionnement des noeuds, topics (messages) exemple de la tortue
 (un noeud tortue qui est lancé auquel on connecte un autre noeud pour les
  touches tout ça pour le noeud initial /rosouti)
  -> Meme principe que sur le Urbi actuel ce qui faciliterai l'interfaçage entre les deux
  -> Problématique => Pourquoi cela n'interfacerait pas ?
  -> Elaboration d'un serveur simple avec message (précision du message dans un format .msg ou .srv (en fonction de qui envoie quoi))
  -> Bien comprendre le principe que c'est une surcouche => le code est ensuite généré en c++ ou python selon le choix.

Jour 2 :
 Familiariser avec Urbi

  -> Faire serveur client aussi. DONE => fait de base =>
     urbi --port 54000 ; // On lance un serveur
     on se co ensuite avec telnet, netcat et on envoie directement les infos que l'on veut.

     Fonctionnement avec le C++ => faire directement les classes en .cc et faire une surcouche avec des UObject
       HOWTO
        -> Déclarer dans urbi l'objet => UStart(UMachine)

         class UMachine
  				: public urbi::UObject

					/// Urbi constructor.
					/// \param d the duration of the assembly process.
					///           Must be positive.
					/// \return 0 on success.
						int init(ufloat d);
pas oublier en private

private:
  /// The duration of the assembly process.
  urbi::UVar duration;
  /// The actual machine, wrapped in this UObject.
  Machine* machine;


Dans le .cc

Dans le constructor
// Register the Urbi constructor. This is the only mandatory
// part of the C++ constructor.
UBindFunction(UMachine, init);


UBindFunction(UMachine, assemble);
UBindVar(UMachine, duration);


  -> Bouffer de la doc.
Tentative d'interfaçage ?



Compatibilite => comment ? Prendre les mêmes structures que le code généré ? (ROS => génère le code, avec urbi on essaye de les utiliser)

compatibilité déja existante ! => Je pense qu'il faut juste la compléter, au peut etre qu'elle est dans un seul seul. A voir donc.

Besoin de tester les events avec urbi, voir si les events eux sont bien mappés.

Jour 3 :

Apparemment la compatibilité avec ROS serait déjà faite mais non à jour pour la dernière version de ROS et de URBI. // Précisions à fournir.

Test de la compatibilité OK => Première partie tout est fonctionnel.

Il va falloir monter un Urbi sur ma machine pour vraiment tester si tout marche bien.

Compatibilité = OK,

Quelques changements à vérifier (ordre dans les dictionnaries, pas de signal pour un process foireux)

Version 2.7.1 OK URBI/ROS

Journée 4:

Build du urbi sur ma machine.
Probleme pour utilisateur zsh.
Pourrait rendre le truc plus fluide pour les utilisateurs de zsh

Journée 5:

Toujours du build ... // FINISH => Commande à retenir au cas ou
_________________________
../../dev/ast-nodes-gen . < ast.yml // tout génerer
rm src/ast/*.stamp; make -C _build/src
 make -C _build all-am
make -C _build check-doc -j4

_________________________


Apprentissage de GIT.
TODO: mise à jour de la doc pour ROS.
Apprendre à regarder la BF.
=
Je demande pas de créer de nouveaux projets sur la BF, mais de monitorer le kernel sur la BF.

C'est a dire => surveiller les erreurs et les corriger quand je les comprends.


ROS : //
Ros.topics shows that this turtle subscribes to a topic ‘/turtle1/command_velocity’

or

 Ros.topics =>

 ["/turtle1/pose" => ["publishers" => ["/turtlesim"], "subscribers" => [], "type" => "turtlesim/Pose"], "/rosout" => ["publishers" => ["/turtlesim"], "subscribers" => ["/rosout"], "type" => "rosgraph_msgs/Log"], "/turtle1/color_sensor" => ["publishers" => ["/turtlesim", "/urbi_1314366064153905555"], "subscribers" => [], "type" => "turtlesim/Color"], "/rosout_agg" => ["publishers" => ["/rosout"], "subscribers" => [], "type" => "rosgraph_msgs/Log"]]

as de turtle1/command_velocity

Vérifier aussi pour ROSLIB/Log qui n'existe pas.


Jour 6:

Compilation (binaire présent mais erreur a cause du .so)

Réparer les path pour ROS (Makefile)

Réparation du contenu des process. (Pour ros on ne récupère pas lors
d'une erreur)

Script pour générer un format d'image Urbi à partir d'une image ROS


Jour 7:

Réparation compilation (enfin)

Réparation des dépendance à l'aide de rospack cflags-only-I à mettre dans le Makefile

g++ -I `rospack cflags-only-I rostime`  -I /ros_comm/clients/cpp/roscpp/include/ -I `rospack cflags-only-I rosconsole` -I `rospack cflags-only-I roscpp_serialization` -I `rospack cflags-only-I roscpp_traits` -I `cat test` -I `rospack cflags-only-I cpp_common` *.cc

rostime roscpp rosconsole roscpp_serialization roscpp_traits cpp_common

Jour 8
Ticket finish / Exploration du script pour la convertion d'image.
Constat : Si executé trop vite les subscribe ne marche pas (exemple du chatter si le serveur n'est pas encore prêt on ne peut pas subscribe)

Jour 9
Mise à jour de la doc, Nouveaux tickets, Amélioration du UBinary pour obtenirla width, height, size ou le format d'une image.

Jour 10

Fin du Ubinary pour les images. Possibilité d'avoir les dimensions d'un jpeg

TODO:

Vérifier que les infos dans ROS sont bien lu dans URBI.
Arrive pas à voir les logs quand la tortue bouge (rostopic echo /turtle1/command_velocity)²
FIX le cas de la turtle !

Urbi : Ros.topics; != rostopic list;

Charger des images venant de ROS (venant d'un dossier par exemple pour tester le script rosscript.u)

TODO: Pour les tickets => dans le git log => si reponse a un ticket mettre un #numero_ticket pour que redmine gere derriere

Jour 11:

Faire marcher le script de guillaume. DONE

Tester en remote.

Faire marcher le flux video


/!\ Si jamais make -C modules ne marche pas => git-my-update dans submodules/modules

Jour 12:

Finition de la documentation pour les envoie publisher d'image de ROS.

TODO : Développer un paragraphe sur rxgraph ??

Finir UBinary + echange image urbi => ROS et stream image video

TODO : bien préciser l'endroit du travail pour les commits
TODO = PB avec format image ! marche que pour rgb et pas pour jpeg !

Almost done pour l'envoie des images !

Jour 13
// Probleme connection OK mais echange d'image fail ...
Regarder au niveau du format, c'est la ou ça plante (probleme de typage
de la structure apparement)

Jour 14
Connection en remote
ROS - ROS OK
Urbi - ROS OK
Ros - Urbi OK !

Tester tous les tests actuels
Ok pour turtlesim + tests avec message simple etc.

Tester avec image.

Toujours pb d'image envoie de urbi => ROS.
Data corrompus ... + pb dans gestion binary dans le common-msg.cc

voir => testchelou.u => surement probleme avec formatage rgb

Jour 15
DOC DONE.

Problem segfault de temps en temps ...
FIXME:
URGENT: réparer entièrement le cas de URBI->ROS segfault de temps en temps sur l'échange !
Voir avec Akim pour ça.
common-msg.cc

Nouveau travail sur les images.

Tester les convertions de all.uob => bien fait ?

Pas compris la partie avec matthieu (surement si binding avec UObject => pourrait être plus pratique avec ROS)
Mettre une référence de test
Inclure des tests

Jour 16:

Réparation du probleme du publisher, la structure de l'arbre n'était pas bonne.

Jour 17:

Debut du boulot sur les images et les conversions avec all

utiliser urbi launch, loader test/all, conversion qui fait tout!

Jour 18:

OK pour les conversion.
Automatisation des tests dans le depot.
Déplacement de dossiers, création de nouveaux.
Conversion dans TOUS les sens !

TODO: Voir si on n'a pas cassé des tests. => test-suite.u

